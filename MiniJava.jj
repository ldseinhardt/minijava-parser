PARSER_BEGIN(MiniJava)

import java.io.*;

public class MiniJava {
  public static void main(String args[]) throws ParseException, IOException {
    MiniJava parser = new MiniJava(new FileInputStream(args[0]));
    parser.Goal();
  }
}

PARSER_END(MiniJava)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN :
{
  <CLASS: "class">
| <PUBLIC: "public">
| <STATIC: "static">
| <VOID: "void">
| <MAIN: "main">
| <STRING: "String">
| <EXTENDS: "extends">
| <RETURN: "return">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <PRINT: "System.out.println">
| <LENGTH: "length">
| <NEW: "new">
| <THIS: "this">
| <TYPE_INT: "int">
| <TYPE_BOOL: "boolean">
| <INTEGER_LITERAL: (["0"-"9"])+>
| <BOOLEAN_LITERAL: "true"|"false">
| <OPERATOR: "&&"|"<"|"+"|"-"|"*">
| <IDENTIFIER: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9", "_"])*>
}

void Goal():
{}
{
  MainClass()
  (ClassDeclaration())*
  <EOF>
}

void MainClass():
{}
{
  <CLASS> Identifier()
  "{"
    <PUBLIC> <STATIC> <VOID> <MAIN> "(" <STRING> "[" "]" Identifier() ")"
    "{"
       Statement()
    "}"
  "}"
}

void ClassDeclaration():
{}
{
  <CLASS> Identifier() [<EXTENDS> Identifier()]
  "{"
    (VarDeclaration())*
    (MethodDeclaration())*
  "}"
}

void MethodDeclaration():
{}
{
  <PUBLIC> Type() Identifier() "(" [Type() Identifier() ("," Type() Identifier())*] ")"
  "{"
    (LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
    <RETURN> Expression() ";"
  "}"
}

void VarDeclaration():
{}
{
  Type() Identifier() ";"  
}

void Type():
{}
{
  (<TYPE_INT> ["[" "]"])
| <TYPE_BOOL>
| Identifier()
}

void Statement():
{}
{
  ("{" (Statement())* "}")
| (<IF> "(" Expression() ")" Statement() <ELSE> Statement())
| (<WHILE> "(" Expression() ")" Statement())
| (<PRINT> "(" Expression() ")" ";")
| (Identifier() ["[" Expression() "]"] "=" Expression() ";")
}

void Expression():
{}
{
  (
      <NEW> ((<TYPE_INT> "[" Expression() "]")|(Identifier() "(" ")"))
    | <INTEGER_LITERAL>
    | <BOOLEAN_LITERAL>
    | Identifier()
    | <THIS>
    | ("!" Expression())
    | ("(" Expression() ")")
  )
  ( 
    LOOKAHEAD(2) 
    ( 
        ("." (<LENGTH>|(Identifier() "(" [Expression() ("," Expression())*] ")")))
      | ("[" Expression() "]")
      | (<OPERATOR> Expression())
    )
  )*
}

void Identifier():
{}
{
  <IDENTIFIER>
}